---
output:
  html_document: default
  pdf_document: default
---
# Source
```{r, warning=FALSE, message = FALSE}
setwd("~/QBMS GIGWA")
source("Functions.R")
```

# Data import
## QBMS
```{r echo=TRUE, warning=FALSE, results='hide'}
#for development version (w/ new functions)
library(QBMS)
set_qbms_config("https://gigwa.icarda.org:8443/gigwa/index.jsp", 
                time_out = 300, engine = "gigwa", no_auth = TRUE)

login_gigwa("Tamara", "-Zy2gn5ijQcW!EE")

# list all databases
gigwa_list_dbs()

# select a database by name
gigwa_set_db("BarleySubData")

# list all projects in the selected database
gigwa_list_projects()

# select a project by name
gigwa_set_project("BarleySubData")

# list all runs in the selected project
gigwa_list_runs()

# select a specific run by name
gigwa_set_run("Run1")

# get a list of all samples in the selected run
samples <- gigwa_get_samples()

# get sequence list
chroms <- gigwa_get_sequences()

# get markers
markers <- gigwa_get_markers()

# get allele matrix
#marker_matrix <- gigwa_get_allelematrix()
#head(marker_matrix)

#saveRDS(marker_matrix, file = "Data/Barley/BarleyMarkerMatrix.rds")

# get a list of all samples in the selected run
#metadataQBMS <- gigwa_get_metadata() #only gives storage code an type of germplasm
```
## Genesys
```{r, eval=FALSE, warning=FALSE, message = FALSE}
# read ICARDA IG
Meta <- read.csv(file = "Data/Barley/AccessionsWeHave.csv", header = TRUE, sep=",")

LatLon <- Meta[c("DECLATITUDE","DECLONGITUDE","ORIGCTY","ACCENUMB")]
# remove NULL
LatLon <- LatLon[!LatLon$DECLATITUDE == "NULL",]
colnames(LatLon) <-c ("Latitude", "Longitude", "Country", "Accession")
LatLon$Latitude <- as.numeric(LatLon$Latitude)
LatLon$Longitude <- as.numeric(LatLon$Longitude)

library(raster)
library(rasterVis)
library(sp)
library(rworldmap)
library(geodata)

# create a SpatialPointsDataFrame
options(timeout = 10000)
#worldclim_data <- getData('worldclim', var='bio', res=10)
worldclim_data <- worldclim_global(var = 'bio', res = 10, path = "Data/Barley/ClimateDta.tsv")

# Extract bioenvironmental data for Location 1 from WorldClim
worldclim_data_locations <- extract(worldclim_data, LatLon[, c("Longitude", "Latitude")])
colnames(worldclim_data_locations) <- paste0("BIO", 1:19)
rownames(worldclim_data_locations) <- LatLon$Accession

write.table(worldclim_data_locations, "ClimaticDataWithGPS.tsv", sep = "\t")

location <- read.table("Data/Barley/ClimaticDataWithGPS.tsv")
```

## Metadata files
```{r, warning=FALSE, message = FALSE}
metadata <- read.table(file = "Data/Barley/Request_Meta.tsv", sep = "\t", header = TRUE)
Coord <- read_excel("Data/Barley/passport with coordinate.xlsx", col_names = T)
Coord$Genotypes <- paste("ICARDA",Coord$Genotypes, sep = "_") #same ID format
names(Coord)[1] <- "Individual"
metadata <- merge(metadata, Coord[, c("Individual","TAXON","LON","LAT")], by="Individual", all.x=TRUE)

met <- metadata[metadata$countryOfOriginCode %in% c("ETH", "CHN", "TUR"),]
write_xlsx(met, path = "BarleyMetadata.xlsx")
```

## Unfiltered matrix import

```{r,  warning=FALSE, message = FALSE}
marker_matrix <- as.matrix(readRDS(file = "Data/Barley/BarleyMarkerMatrix.rds"))
```

# Data Filtering
```{r, warning=FALSE, message = FALSE}
matrix <- filterData(marker_matrix, call_rate = 0.2, maf = 0.01)
matrix <- t(matrix)
```

```{r echo=TRUE, results='hide', warning=FALSE, message = FALSE}
# missing metadata
metadata[which(is.na(metadata$LON)),]
matrix <- matrix[rownames(matrix) != "ICARDA_G1474",]
metadata <- metadata[-1395,]
```

```{r echo=TRUE, results='hide', warning=FALSE, message = FALSE}
#landraces only
metadata$Individual[metadata$biologicalStatusOfAccessionCode == 300]
matrix <- matrix[rownames(matrix) %in% metadata$Individual[metadata$biologicalStatusOfAccessionCode == 300],]

metadata <- metadata[metadata$biologicalStatusOfAccessionCode == 300,]
```

# Marker Plots

```{r, warning=FALSE, message = FALSE}
markerplots <- markerPlots(markers, marker_matrix)
```

```{r, warning=FALSE, message = FALSE}
markerplots$markerPlot
```

```{r, warning=FALSE, message = FALSE}
markerplots$mafPlot
```

```{r, warning=FALSE, message = FALSE}
markerplots$missingData
```

# Genetic diversity
## Parameters
```{r, warning=FALSE, message = FALSE}
SNPReadyParams <- genDivSNPReady(matrix, plots = TRUE)
```

```{r, warning=FALSE, message = FALSE}
SNPReadyParams$markers
```

```{r, warning=FALSE, message = FALSE}
SNPReadyParams$plots
```

## By population
```{r, warning=FALSE, message = FALSE}
popSet <- as.factor(metadata$countryOfOriginCode[metadata$Individual %in% rownames(matrix)])
He <- HeBySubgroups(matrix, popSet, plot = TRUE)
```

```{r, warning=FALSE, message = FALSE}
He$plot
```

```{r, warning=FALSE, message = FALSE}
He$df
```

# Population structure
## PCA
```{r, warning=FALSE, message = FALSE}
popSet <- as.factor(metadata$countryOfOriginCode[metadata$Individual %in% rownames(matrix)])
pca <- PCAFromMatrix(matrix, popSet)
```

```{r}
pca$plot
```

## DAPC
```{r, warning=FALSE, message = FALSE}
BICDAPC <- kMeansStats(matrix, pca$pca, 10, "BIC")
DAPC <- DAPC(matrix, krange = 2:6, pca = pca$pca, subgroups = NULL, dapcPlot = TRUE)
```

```{r}
DAPC$dapcPlot
```

### Composition plot
```{r, warning=FALSE, message = FALSE, fig.width=8, fig.height=4}
DAPCCompoPlot(DAPC$dapc, matrix, krange = 2:6, subgroups = popSet)
```

```{r}
DAPCCompoPlotInt(DAPC$dapc, matrix, krange = 2:6, subgroups = popSet)
```

## sNMF
```{r echo=TRUE, warning=FALSE, results='hide'}
# creating object
write.geno.mod(matrix, "Data/Barley/Landraces/LEAgenoBarley.geno")

# creating snmf
sNMF <- sNMFFunction(matrix, subgroups = NULL, "Data/Barley/Landraces/LEAgenoBarley.geno", maxK = 6, cePlot = TRUE)
```

### Composition plot
```{r, warning=FALSE, message = FALSE, fig.width=8, fig.height=4}
sNMFCompoPlot(sNMF$qmatrix, matrix, krange = 2:6, subgroups = popSet)
```

```{r}
sNMFCompoPlotInt(sNMF$qmatrix, matrix, krange = 2:6, subgroups = popSet)
```

### Map plot
```{r, warning=FALSE, message = FALSE}
sNMFMapPlot(matrix, sNMF$snmf, xy = metadata[,c("LON","LAT")], 4)
```

### Ordered plot

```{r, warning=FALSE, message = FALSE}
kOrderedPlot(as.data.frame(Q(sNMF[["snmf"]], K = 4)))
```

# sPCA
```{r echo=TRUE, warning=FALSE, error=FALSE, message=FALSE, results='hide'}
spca <- sPCA(matrix, subgroups = popSet, xy = metadata[,c("LON","LAT")], eigenPlot = TRUE, tests = TRUE)
```

```{r}
spca$eigenPlot
```

```{r, warning=FALSE, message = FALSE}
sPCAMapPlot(spca$spca, matrix, xy = metadata[,c("LON","LAT")], axis = 1, pos = TRUE)
```




