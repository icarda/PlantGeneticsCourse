{
  "hash": "2bebc7075af5ee87cfc20abb9b7a7fc1",
  "result": {
    "engine": "knitr",
    "markdown": "# Module 2.1: Loading Breeding Data - ICARDA Barley Example\n\n## Introduction to the Dataset\n\nIn this module, we'll learn how to load typical phenotypic data into R. We'll use a real-world example: data from a study on **275 barley accessions conducted at ICARDA in 2019**. This dataset contains various measurements related to agronomic traits, grain quality, and morphological characteristics.\n\n**Why this dataset?** \\* It's representative of the kind of multi-trait data breeders work with. \\* It allows us to practice loading, inspecting, and performing basic summaries on realistic data. \\* This data comes from ICARDA's valuable work in crop improvement for dry areas.\n\n**Column Descriptions (Partial List - full list would be in a data dictionary):** \\* `Taxa`: The identifier for each barley accession (genotype). \\* `Area`: Grain area (e.g., mm²). \\* `B_glucan`: Beta-glucan content (%), a quality trait. \\* `DTH`: Days to Heading (days), an agronomic trait. \\* `Fe`: Iron content in grain (ppm), a nutritional trait. \\* `FLA`: Flag Leaf Area (cm²). \\* `GY`: Grain Yield (e.g., t/ha or kg/plot - units should always be known!). \\* `PH`: Plant Height (cm). \\* `Protein`: Grain protein content (%). \\* `TKW`: Thousand Kernel Weight (grams). \\* `Zn`: Zinc content in grain (ppm). \\* *(And many others related to grain morphology and plant characteristics...)*\n\nOur goal is to load this data (which is typically stored in a file like a CSV or Excel sheet) into an R data frame so we can start analyzing it.\n\n## Setting Up: Libraries and File Path\n\nFirst, we need to load the R packages that help us read data. Even though we have previously installed and loaded all packages we will need, in case you are only focusing on reading data, the `readr` package (part of `tidyverse`) is excellent for reading text files like CSVs.\n\nRemember our RStudio Project setup! We will assume the data file is saved in the `data/` subfolder of our project.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the necessary libraries\n# 'tidyverse' includes 'readr' (for read_csv) and 'dplyr' (for glimpse, etc.)\nlibrary(tidyverse) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Reading the CSV File\n\nLet's say our barley data is stored in a CSV file named `icarda_barley_2019_pheno.csv`.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the path to our data file (relative to the project root)\nbarley_data_file_path <- \"data/icarda_barley_2019_pheno.csv\"\n\n# Check if the file exists (good practice!)\nif (file.exists(barley_data_file_path)) {\n  # Use read_csv() from the readr package to load the data\n  barley_pheno_data <- read_csv(barley_data_file_path)\n  \n  print(\"ICARDA Barley Phenotype data loaded successfully!\")\n} else {\n  print(paste(\"ERROR: File not found at:\", barley_data_file_path))\n  print(\"Please make sure 'icarda_barley_2019_pheno.csv' is in the 'data/example' folder.\")\n  # If the file isn't found, we'll create an empty placeholder to avoid later errors in the document\n  barley_pheno_data <- tibble() # Creates an empty tibble (tidyverse data frame)\n}\n```\n:::\n\n\n\n\n\n\n\n\n## First Look: Inspecting the Loaded Data\n\nIt's **CRUCIAL** to always inspect your data immediately after loading it to make sure it looks correct.\n\n1.  **`head()`**: Shows the first few rows (default is 6).\n\n2.  **`dim()`**: Shows the dimensions (number of rows, number of columns).\n\n3.  **`glimpse()`** (from `dplyr`): A great way to see column names, their data types, and the first few values. Better than `str()` for tibbles.\n\n4.  **`summary()`**: Provides basic summary statistics for each column (Min, Max, Mean, Median, Quartiles for numeric; counts for character/factor).\n\n## Understanding Data Types in Our Barley Data\n\nWhen `glimpse()` runs, you'll see types like: \\* `Taxa`: Should be `<chr>` (character) as it's an identifier. \\* `Area`, `B_glucan`, `DTH`, `GY`, `PH`, etc.: Should mostly be `<dbl>` (double-precision numeric) as they are measurements.\n\nIf `read_csv` misinterprets a numeric column as character (e.g., if there's a text entry like \"missing\" in a numeric column), you'll need to clean that data or specify column types during import using the `col_types` argument in `read_csv()`. (We'll cover data cleaning later).\n\n## Quick Summary of a Specific Trait\n\nLet's say we are interested in Grain Yield (`GY`).\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make sure the data and the 'GY' column exist\nif (nrow(barley_pheno_data) > 0 && \"GY\" %in% names(barley_pheno_data)) {\n  # Access the GY column\n  yield_values <- barley_pheno_data$GY\n  \n  # Calculate some basic statistics\n  mean_yield <- mean(yield_values, na.rm = TRUE) # na.rm=TRUE ignores missing values in calculation\n  min_yield <- min(yield_values, na.rm = TRUE)\n  max_yield <- max(yield_values, na.rm = TRUE)\n  sd_yield <- sd(yield_values, na.rm = TRUE)\n\n  print(paste(\"Average Grain Yield (GY):\", round(mean_yield, 2)))\n  print(paste(\"Minimum Grain Yield (GY):\", round(min_yield, 2)))\n  print(paste(\"Maximum Grain Yield (GY):\", round(max_yield, 2)))\n  print(paste(\"Standard Deviation of GY:\", round(sd_yield, 2)))\n\n  # How many accessions do we have yield data for (non-missing)?\n  num_yield_obs <- sum(!is.na(yield_values))\n  print(paste(\"Number of accessions with GY data:\", num_yield_obs))\n} else if (nrow(barley_pheno_data) > 0) {\n  print(\"Column 'GY' not found in the loaded data.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Average Grain Yield (GY): 1.19\"\n[1] \"Minimum Grain Yield (GY): 0.5\"\n[1] \"Maximum Grain Yield (GY): 2.47\"\n[1] \"Standard Deviation of GY: 0.31\"\n[1] \"Number of accessions with GY data: 275\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n**Exercise:** 1. Load the `icarda_barley_2019_pheno.csv` file into R. 2. Use `glimpse()` to check the column names and data types. 3. Calculate and print the average Plant Height (`PH`) from the dataset. Remember to handle potential missing values (`na.rm = TRUE`).\n\nThis module has shown you the first critical step: getting your valuable field data into R. In the next modules, we'll learn how to clean, manipulate, and visualize this data.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exercise\n# Inspect data and data types\nglimpse(barley_pheno_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 275\nColumns: 24\n$ Taxa        <chr> \"G1\", \"G2\", \"G3\", \"G4\", \"G5\", \"G7\", \"G8\", \"G9\", \"G12\", \"G1…\n$ Area        <dbl> 22.72177, 23.07877, 19.93612, 23.32083, 19.54859, 22.96829…\n$ B_glucan    <dbl> 6.848584, 7.430943, 4.012621, 6.091926, 7.307811, 7.267738…\n$ Circularity <dbl> 1.887915, 1.780070, 1.555492, 2.300471, 1.896487, 1.752493…\n$ Diameter    <dbl> 5.366522, 5.403555, 5.034355, 5.420909, 4.981714, 5.422541…\n$ DTH         <dbl> 75.89584, 70.17532, 74.19461, 74.39462, 77.66037, 72.65420…\n$ Fe          <dbl> 29.67685, 31.59088, 34.15825, 31.44544, 30.31127, 30.61605…\n$ FLA         <dbl> 16.586760, 7.966124, 7.592350, 18.753322, 16.532845, 18.40…\n$ FLH         <dbl> 82.77116, 62.36145, 61.81653, 69.77661, 64.38496, 78.08801…\n$ GpS         <dbl> 44.70886, 25.25222, 25.72167, 66.23116, 54.63221, 26.63211…\n$ GWS         <dbl> 1.6156277, 1.0563208, 0.9516462, 2.5202010, 1.2044795, 1.0…\n$ GY          <dbl> 1.3747605, 1.3735596, 0.9054266, 0.7614383, 0.8827177, 2.0…\n$ HW          <dbl> 57.65487, 64.41055, 69.41048, 55.35590, 53.65940, 64.98411…\n$ Length      <dbl> 10.542981, 10.106793, 8.565790, 11.920853, 9.781558, 9.968…\n$ Length_Wid  <dbl> 3.313525, 3.013035, 2.524445, 3.833381, 3.305421, 2.978634…\n$ PdH         <dbl> 91.09761, 63.65600, 68.75482, 69.50663, 64.10002, 80.59519…\n$ PdL         <dbl> 8.1320940, 1.0341930, 6.5555050, 0.9639243, -0.6416490, 2.…\n$ Perimeter   <dbl> 29.07010, 28.33654, 24.57919, 32.21194, 27.02846, 28.03643…\n$ PH          <dbl> 96.76140, 70.56720, 77.16486, 79.22446, 71.78375, 88.70248…\n$ Protein     <dbl> 14.06372, 14.16090, 15.23294, 14.34877, 14.46224, 14.31356…\n$ SL          <dbl> 5.343668, 6.804813, 8.074976, 10.039594, 7.526454, 8.31457…\n$ TKW         <dbl> 28.48964, 35.00164, 31.95561, 27.27054, 24.64983, 33.83401…\n$ width       <dbl> 3.251696, 3.439623, 3.455571, 3.204069, 3.000305, 3.429043…\n$ Zn          <dbl> 31.21179, 34.21217, 25.50724, 32.24918, 33.58773, 33.92710…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculating average Plant Height\nplant_heights <- barley_pheno_data$PH # extracting plant height column\nmean_height <- mean(plant_heights, na.rm = TRUE)\n\n# Printing average Plant Height\nprint(paste(\"Average Plant Height (PH):\", round(mean_height, 2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Average Plant Height (PH): 74.63\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}