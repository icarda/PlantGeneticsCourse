{
  "hash": "c22ab51adc99087e9f2675cfb86ae242",
  "result": {
    "engine": "knitr",
    "markdown": "# Module 1.3: Basic Operations in R\n\nNow that we know about data types and structures, let's see how to manipulate them.\n\n## Arithmetic Operations (Review)\n\nWorks on numbers and numeric vectors/matrices element-wise.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmixed_vector <- c(10, \"VarietyA\", TRUE)\nprint(mixed_vector) # All become character strings!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10\"       \"VarietyA\" \"TRUE\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nclass(mixed_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Logical Comparisons and Operators\n\nUsed to ask TRUE/FALSE questions about our data. Essential for filtering.\n\n-   **Comparison Operators:**\n    -   `>` : Greater than\n    -   `<` : Less than\n    -   `>=`: Greater than or equal to\n    -   `<=`: Less than or equal to\n    -   `==`: **Exactly equal to** (TWO equal signs! Very common mistake to use just one `=`)\n    -   `!=`: Not equal to\n-   **Logical Operators (Combine TRUE/FALSE):**\n    -   `&` : AND (both sides must be TRUE)\n    -   `|` : OR (at least one side must be TRUE)\n    -   `!` : NOT (reverses TRUE to FALSE, FALSE to TRUE)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyield <- 5.2\nmin_acceptable_yield <- 5.0\nvariety <- \"ICARDA_Gold\"\n\n# Comparisons\nyield > min_acceptable_yield # Is yield acceptable? TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nvariety == \"Local_Check\"    # Is it the local check? FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nvariety != \"Local_Check\"    # Is it NOT the local check? TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# On vectors\nplot_yields <- c(5.2, 4.5, 6.1, 5.5)\nplot_yields > 5.0 # Which plots yielded above 5.0? [TRUE FALSE TRUE TRUE]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nplot_varieties <- c(\"ICARDA_Gold\", \"Local_Check\", \"ICARDA_RustResist\", \n                    \"ICARDA_Gold\")\n# Which plots are ICARDA_Gold? [TRUE FALSE FALSE TRUE]\nplot_varieties == \"ICARDA_Gold\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combining conditions\n# Find plots where yield > 5.0 AND variety is ICARDA_Gold\n(plot_yields > 5.0) & (plot_varieties == \"ICARDA_Gold\") # [TRUE FALSE FALSE TRUE]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find plots where yield > 6.0 OR variety is Local_Check\n(plot_yields > 6.0) | (plot_varieties == \"Local_Check\") # [FALSE TRUE TRUE FALSE]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Vectorization: R's Superpower\n\nMany R operations are **vectorized**, meaning they automatically apply to each element of a vector without needing you to write a loop. This makes R code concise and efficient. We've already seen this with arithmetic (`plot_yields + 0.5`) and comparisons (`plot_yields > 5.0`).\n\nFunctions like `mean()`, `sum()`, `min()`, `max()`, `sd()` (standard deviation), `length()` also work naturally on vectors:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_yields <- c(5.2, 4.5, 6.1, 5.5)\n\nmean(plot_yields)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.325\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(plot_yields)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6652067\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(plot_yields > 5.0) # How many plots yielded > 5.0? (TRUE=1, FALSE=0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(plot_yields) # How many plots?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Working with Data Frames (Indexing and Filtering)\n\nThis is crucial for selecting specific data from your tables.\n\nLet's use the `trial_data` data frame from the previous section:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial_data <- data.frame(\n  PlotID = c(\"A101\", \"A102\", \"B101\", \"B102\"),\n  Variety = factor(c(\"ICARDA_Gold\", \"Local_Check\", \"ICARDA_RustResist\", \n                     \"ICARDA_Gold\")),\n  Yield_kg_plot = c(5.2, 4.5, 6.1, 5.5),\n  Is_Resistant = c(TRUE, FALSE, TRUE, TRUE)\n)\n```\n:::\n\n\n\n\n\n\n1.  **Accessing Columns:** Use `$` (most common) or `[[ ]]`. `trial_data$Variety or trial_data[[\"Variety\"]]`\n\n2.  **Accessing Rows/Columns/Cells using `[row, column]`:**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the value in Row 2, Column 3\ntrial_data[2, 3] # Should be 4.5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get the entire Row 1 (returns a data frame)\ntrial_data[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID     Variety Yield_kg_plot Is_Resistant\n1   A101 ICARDA_Gold           5.2         TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get the entire Column 2 (Variety column, returns a vector/factor)\ntrial_data[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] ICARDA_Gold       Local_Check       ICARDA_RustResist ICARDA_Gold      \nLevels: ICARDA_Gold ICARDA_RustResist Local_Check\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get Columns 1 and 3 (PlotID and Yield)\ntrial_data[, c(1, 3)] # Use c() for multiple column indices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID Yield_kg_plot\n1   A101           5.2\n2   A102           4.5\n3   B101           6.1\n4   B102           5.5\n```\n\n\n:::\n\n```{.r .cell-code}\ntrial_data[, c(\"PlotID\", \"Yield_kg_plot\")] # Can also use column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID Yield_kg_plot\n1   A101           5.2\n2   A102           4.5\n3   B101           6.1\n4   B102           5.5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n3.  **Filtering Rows Based on Conditions (VERY IMPORTANT):** Use a logical condition inside the `row` part of the square brackets.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select rows where Yield_kg_plot is greater than 5.0\nhigh_yield_plots <- trial_data[trial_data$Yield_kg_plot > 5.0, ]\nprint(high_yield_plots)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID           Variety Yield_kg_plot Is_Resistant\n1   A101       ICARDA_Gold           5.2         TRUE\n3   B101 ICARDA_RustResist           6.1         TRUE\n4   B102       ICARDA_Gold           5.5         TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select rows where Variety is \"ICARDA_Gold\"\nicarda_gold_plots <- trial_data[trial_data$Variety == \"ICARDA_Gold\", ]\nprint(icarda_gold_plots)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID     Variety Yield_kg_plot Is_Resistant\n1   A101 ICARDA_Gold           5.2         TRUE\n4   B102 ICARDA_Gold           5.5         TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select rows where Variety is \"ICARDA_Gold\" AND yield > 5.0\n# (We generated the logical vector for this earlier)\ncondition <- (trial_data$Variety == \"ICARDA_Gold\") & \n             (trial_data$Yield_kg_plot > 5.0)\nprint(condition) # Shows [TRUE FALSE FALSE TRUE]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nselected_plots <- trial_data[condition, ]\nprint(selected_plots)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID     Variety Yield_kg_plot Is_Resistant\n1   A101 ICARDA_Gold           5.2         TRUE\n4   B102 ICARDA_Gold           5.5         TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select rows where the variety is resistant\nresistant_plots <- trial_data[trial_data$Is_Resistant == TRUE, ] \n# Or just trial_data[trial_data$Is_Resistant, ]\nprint(resistant_plots)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PlotID           Variety Yield_kg_plot Is_Resistant\n1   A101       ICARDA_Gold           5.2         TRUE\n3   B101 ICARDA_RustResist           6.1         TRUE\n4   B102       ICARDA_Gold           5.5         TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## apply() collection\n\nThe apply() family of functions lets us apply a function to the rows or columns in a matrix or data frame, a list or a vector.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Imagine we have a data matrix of plot yield values for different varieties.\n# Each row represents a variety and each column a yield measurement for each trial\nplot_trials <- matrix(c(5.2, 4.5, 6.1, 5.5, 4, 6.6, 7, 5.1, 5.3), \n                      nrow = 3, ncol = 3)\n\n# We calculate the mean for each variety (each row)\n# 1 means function is run on rows, 2 would mean function is run on columns\napply(plot_trials, 1, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.900000 4.533333 6.000000\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**Exercise:** Select the data for the 'Local_Check' variety from the `trial_data` data frame. Calculate its yield.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}