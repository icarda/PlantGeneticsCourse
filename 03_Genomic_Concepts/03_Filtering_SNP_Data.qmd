# Module 3.3: Data Quality Control and Filtering for SNP Data

Filtering SNP data is important for genetic and genomic studies in order to improve data quality, optimize resources and avoid noise by removing non-informative markers, and account for missing data. The most common filtering criteria we will focus on is **call rate**, **missing data** and **MAF (Minor Allele Frequency)**.

## Call Rate

Call rate refers to the **percentage of non-missing data for a specific SNP marker**. It is calculated by dividing the number of non-missing individuals / total number of individuals for each marker. The filtering threshold will depend on the specific data set or investigation; however, common thresholds tend to be 0.9 or 0.95.\]

```{r setup, include=FALSE}
library(here)
source(here("code","setup.R"))
```

```{r load-matrix, include=FALSE}
matrix <- read.table(here("data", "BarleyMatrix.txt"), sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
```

```{r matrix, eval=FALSE}
# Load SNP data matrix
matrix <- read.table("data/BarleyMatrix.txt", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
```

```{r call-rate}
# Considering our n x m matrix with n markers and m individuals
# Defining our threshold
call_rate <- 0.9

# Filtering our matrix
filtered_matrix <- matrix[which(rowMeans(!is.na(matrix)) > call_rate),]
```

## Missing data

Just as we can filter markers with too much missing data, we can filter individuals with too many missing values. Our missing data threshold will refer to the **percentage of non-missing data for each individual**.

```{r na-ind}
# Defining our threshold
na_ind <- 0.8

# Filtering our matrix
filtered_matrix <- filtered_matrix[,which(colMeans(!is.na(filtered_matrix)) > na_ind)]
```

## MAF

Minor allele frequency refers to the **frequency of the least common allele for a particular SNP marker** in a given population. It is commonly used as a filtering criteria as it allows you to exclude markers that contribute little to population-level analyses and helps reduce noise.

For example, if I have a marker which is homozygous 0 (`AA`), heterozygous 1 (`AG`), and homozygous 2 (`GG`), each individual contributes 2 alleles. We then count the minor alleles across all individuals to obtain MAF.

```{r maf}
# Calculating MAF for all markers
mafFreq <- apply(filtered_matrix, 1, function(row) {
  row <- row[!is.na(row)]
  maf <- sum(row) / (2 * length(row))
  maf <- min(maf, 1 - maf)
  maf
})

# Filtering matrix according to maf
filtered_matrix <- filtered_matrix[mafFreq > 0.01,]
```

## General Filtering

To simplify all previous steps, we can use the `filterData()` function from our package. The function allows you to define thresholds for call rate, MAF and missing individuals. By setting `stats = TRUE`, you can also get a data frame with statistics for the number of filtered markers and individuals by criteria.

```{r filter}
filter <- filterData(matrix, call_rate = 0.9, maf = 0.01, na_ind = 0.8)
```
