# Module 3.4: Genetic Diversity

SNP data provides us with a genome-wide view of **variation within individuals and populations**. Calculating certain diversity parameters from this data helps us better understand the genetic diversity held within a population and between its subpopulations. These can later be used for diversity-based plant breeding.

## Diversity parameters

We can easily calculate the most relevant diversity parameters using the `genDivSNPReady()` from our package.

`genDivSNPReady(geno, plots = FALSE)`: Returns diversity parameters calculated with `snpReady` package.

-   `geno`: our genotype matrix

-   `plots`: defaults to FALSE, if TRUE, a graphical output of the results is produced

The function returns a list object with two data frames, one with the diversity parameters for each **marker**, and one with the diversity parameters for each **accession**. If `plots = TRUE`, a third object is generated with the different plots.

```{r setup, include=FALSE}
library(here)
source(here("code","setup.R"))
```

```{r data-import-run, include=FALSE}
# Importing filtered genotypic data
matrix <- read.table(here("data", "FilteredBarley.txt"), sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# SNP matrix has to have individuals in rows and markers as columns for the posterior functions
matrix <- t(matrix)

# Importing metadata
metadata <- read_excel(here("data", "BarleyMetadata.xlsx"))
metadata <- metadata[metadata$Individual %in% rownames(matrix),] #Ensuring IDs match
```

```{r data-import, eval=FALSE}
# Importing filtered genotypic data
matrix <- read.table("data/FilteredBarley.txt", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# SNP matrix has to have individuals in rows and markers as columns for the posterior functions
matrix <- t(matrix)

# Importing metadata
metadata <- read_excel("data/BarleyMetadata.xlsx")
```

```{r gendiv}
# Obtaining genetic diversity parameters
SNPReadyParams <- genDivSNPReady(matrix, plots = TRUE)

# Printing marker diversity parameters
SNPReadyParams$markers

# Printing individual's diversity parameters
SNPReadyParams$accessions

# Diversity plots
SNPReadyParams$plots
```

## By population

These parameters can also be calculated by population in order to compare the diversity between them. We will use the `HeBySubgroups()` function from our package.

`HeBySubgroups(geno, subgroups, plot = FALSE)`: returns **expected heterozygosity (He)** by groups, including an optional plot

-   `geno`: our genotype matrix

-   `subgroups`: a vector with our factor information

-   `plots`: defaults to FALSE, if TRUE, a graphical output of the results is produced

```{r pop}
# Defining our populations from country information
popSet <- as.factor(metadata$countryOfOriginCode[metadata$Individual %in% rownames(matrix)])

# Calculating parameters by population
He <- HeBySubgroups(matrix, popSet, plot = TRUE)

# Plotting results
He$plot

# Printing results
He$df
```

## AMOVA

AMOVA or Analysis of Molecular Variance can be run from a genetic distance matrix to evaluate genetic variation within populations, between populations and among populations. It helps us understand the structure of variation in our sample. We will be using the `genDistPop()` and `AMOVA()` functions from our package for this. They use frameworks from `adegenet` and `poppr` to carry out the AMOVA.

`genDistPop(geno, subgroups, method = 1, PCoA = FALSE)`: returns a genetic distance matrix and optional Principal Coordinate Analysis from the distance matrix.

-   `geno`: our genotype matrix

-   `subgroups`: a vector with our factor information

-   `method`: defaults to 1 (Nei's distance), allows for values 1-5 (Nei, Edwards, Reynolds, Rogers, Provesti)

-   `PCoA`: defaults to FALSE, if TRUE, performs a principal coordinates analysis of a Euclidean distance matrix

`AMOVA()`:

-   `geno`: our genotype matrix

-   `subgroups`: a vector with our factor information

```{r amova}
# Calculating our genetic distance matrix and PCoA
genDist <- genDistPop(matrix, popSet, PCoA = TRUE)

# Printing results
genDist

# Running AMOVA
amovaResult <- AMOVA(matrix, popSet)

# Printing results
amovaResult
```
